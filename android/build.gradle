buildscript {
  // Buildscript is evaluated before everything else so we can't use getExtOrDefault
  def kotlin_version = rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : project.properties["KlippaIdentityVerificationSdk_kotlinVersion"]

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:7.2.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
  }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

rootProject.allprojects {
  repositories {
    mavenCentral()
    google()
    maven { url "https://jitpack.io" }
    maven {
        credentials {
            username System.getenv()['KLIPPA_IDENTITY_VERIFICATION_SDK_USERNAME'] ? System.getenv()['KLIPPA_IDENTITY_VERIFICATION_SDK_USERNAME'] : (keystoreProperties["klippa.identity_verification.sdk.username"] ? keystoreProperties["klippa.identity_verification.sdk.username"] : '')
            password System.getenv()['KLIPPA_IDENTITY_VERIFICATION_SDK_PASSWORD'] ? System.getenv()['KLIPPA_IDENTITY_VERIFICATION_SDK_PASSWORD'] : (keystoreProperties["klippa.identity_verification.sdk.password"] ? keystoreProperties["klippa.identity_verification.sdk.password"] : '')
        }
        url System.getenv()['KLIPPA_IDENTITY_VERIFICATION_SDK_URL'] ? System.getenv()['KLIPPA_IDENTITY_VERIFICATION_SDK_URL'] : (keystoreProperties["klippa.identity_verification.sdk.url"] ? keystoreProperties["klippa.identity_verification.sdk.url"] : 'https://custom-ocr.klippa.com/sdk/android/maven')
    }
  }
}

def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties["KlippaIdentityVerificationSdk_" + name]
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["KlippaIdentityVerificationSdk_" + name]).toInteger()
}

android {
  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
  }
  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_11
    targetCompatibility JavaVersion.VERSION_11
  }

}


def kotlin_version = getExtOrDefault("kotlinVersion")

dependencies {
  // For < 0.71, this will be from the local maven repo
  // For > 0.71, this will be replaced by `com.facebook.react:react-android:$version` by react gradle plugin
  //noinspection GradleDynamicVersion
  implementation "com.facebook.react:react-native"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  def fallbackKlippaVersion = "0.7.5"
  def klippaIdentityVerificationVersion = project.hasProperty('klippaIdentityVerificationVersion') ? project.klippaIdentityVerificationVersion : fallbackKlippaVersion
  implementation "com.klippa:identity_verification:$klippaIdentityVerificationVersion"
}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "KlippaIdentityVerificationSdk"
    codegenJavaPackageName = "com.klippaidentityverificationsdk"
  }
}
